{"version":3,"sources":["components/MyHeader.js","components/FoodGroupOption.js","components/FoodGroupList.js","components/FoodBoxSelect.js","components/FoodBox.js","components/AddButton.js","components/SelectedBox.js","components/RemoveButton.js","components/EditButton.js","components/DeleteButton.js","components/FoodNutritionFacts.js","components/AddFoodItemButton.js","components/TotalNutritionFacts.js","components/ChangeGoalModal.js","components/EditModal.js","components/DeleteMessageModal.js","components/AddFoodItemModal.js","components/ProgressBars.js","components/App.js","reportWebVitals.js","index.js"],"names":["MyHeader","Fragment","className","React","Component","FoodGroupOption","value","this","props","FoodGroupList","handleChange","e","console","log","setState","target","newCategory","state","foodGroups","id","onClick","name","renderOptions","FoodBoxSelect","FoodBox","selectData","push","handleMenuItemChange","menuItems","content","item","getCategoryContent","onChange","type","size","AddButton","block","color","SelectedBox","selectedItems","i","length","RemoveButton","EditButton","handleEditPress","DeleteButton","handleDeletePress","FoodNutritionFacts","toggleModal","toggleDeleteMessage","capitalize","str","lowercase","toLowerCase","charAt","toUpperCase","slice","isEdit","newCalories","calories","nutrient","currFood","currSelectedFood","fluid","getColor","totalFat","saturatedFat","transFat","protein","carbs","xs","AddFoodItemButton","hanldeAddFoodItemPress","TotalNutritionFacts","toggleAddFoodItemModal","totalCalories","totalSaturatedFat","totalTransFat","totalProtein","totalCarbs","ChangeGoalModal","handleSubmit","preventDefault","formData","calorieGoal","totalFatGoal","proteinGoal","carbsGoal","updateGoals","toggle","calorieValue","totalFatValue","proteinValue","carbValue","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","getResponse","jsonOutput","updateGoalData","catch","error","status","json","statusText","isOpen","isModalOpen","onSubmit","defaultValue","bsSize","carbGoal","EditModal","carbohydrates","updateFood","menuItem","refreshFoodData","DeleteMessageModal","deleteFood","refreshMenuItems","category","AddFoodItemModal","foodItemName","dropDownValue","addFood","dropDownToggle","isDropDownOpen","handleDropDownChange","isAddFoodItemModalOpen","placeholder","caret","ProgressBars","calorieProgress","totalFatProgress","proteinProgress","carbProgress","App","updateData","apiResponse","data","fetchData","fetchGoalData","fetchFoodData","food","currMenuSelection","currCalories","currTotalFat","currSaturatedFat","currTransFat","currProtein","currCarbs","fetchFoodsByCategory","childData","deselect","dropdownOpen","addItemButtonClick","currSelectedItems","Math","round","removeItemClick","splice","caloriesInput","isDeleteModalOpen","toggleChangeGoalModal","isChangeGoalModalOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38e002ff.chunk.js","sourcesContent":["import '../../src/App.css';\nimport React from 'react';\n\n\n\nclass MyHeader extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1 className=\"header\">Nurtikit Food Planner</h1>\n                <h6 className=\"header\">NutriKit allows you to select your groceries, and track your nutritional progress (good or bad)</h6>\n            </React.Fragment>\n        );\n    }\n\n}\nexport default MyHeader;","import '../../src/App.css';\nimport React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { DropdownItem } from 'reactstrap';\n\n\nclass FoodGroupOption extends React.Component {\n \n\n    render() {\n        return (\n            \n            <DropdownItem className=\"button\" value={this.props.value}>{this.props.value}</DropdownItem>\n            \n        );\n    }\n\n}\nexport default FoodGroupOption;","import '../../src/App.css';\nimport React from 'react';\nimport FoodGroupOption from './FoodGroupOption'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {DropdownMenu } from 'reactstrap';\n\n\n\n\nclass FoodGroupList extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            value: \"proteins\", \n            \n        };\n        \n    }\n\n   \n\n    renderOptions(foodGroups)\n    {\n        return (\n            <DropdownMenu className=\"button\">\n                <FoodGroupOption id=\"foodGroupList\" value={foodGroups[0]}/>\n                <FoodGroupOption id=\"foodGroupList\" value={foodGroups[1]}/>\n                <FoodGroupOption id=\"foodGroupList\" value={foodGroups[2]}/>\n                <FoodGroupOption id=\"foodGroupList\" value={foodGroups[3]}/>\n                <FoodGroupOption id=\"foodGroupList\" value={foodGroups[4]}/>\n            </DropdownMenu>\n            \n        );\n    }\n\n    handleChange = (e) =>\n    {\n        console.log(\"this happens\")\n        this.setState({value: e.target.value});\n        this.props.newCategory(e.target.value);\n        \n    }\n\n    \n \n    render() {\n        \n        return (\n            \n            \n            <DropdownMenu  onClick={this.handleChange }className=\"top\" id=\"foodGroupList\" name=\"foods\" >\n                {this.renderOptions(this.props.foodGroups)}\n            </DropdownMenu>\n            \n            \n        );\n\n    }\n\n}\nexport default FoodGroupList;","import '../../src/App.css';\nimport React from 'react';\n\n\nclass FoodBoxSelect extends React.Component {\n \n\n    render() {\n        return (\n            \n            <option key={this.props.value} value={this.props.value}>{this.props.value}</option>\n            \n        );\n    }\n\n}\nexport default FoodBoxSelect;","import '../../src/App.css';\nimport React from 'react';\nimport FoodBoxSelect from './FoodBoxSelect';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Input} from 'reactstrap';\n\n\n\nclass FoodBox extends React.Component {\n    \n    constructor(props)\n    {\n        super(props);\n        \n        this.state = {\n            value: \"proteins\"\n        };\n        \n        \n    }\n\n    renderOptions(menuItems)\n    {\n        const getCategoryContent = () => {\n            const content = [];\n            for(let item of menuItems) \n            {\n                content.push(<FoodBoxSelect key={item} value={item}/>);\n            }\n\n            return content;\n        }\n        return (\n            \n            <React.Fragment>\n                {getCategoryContent()}\n            </React.Fragment>\n        );\n    }\n\n    handleChange = (e) =>\n    {\n        var selectData = [];\n        this.setState({value: e.target.value});\n        selectData.push(e.target.value);\n        selectData.push(false);\n        this.props.handleMenuItemChange(selectData);\n    }\n\n    render()\n    {\n        \n        return (\n            \n            <Input onChange={this.handleChange} id=\"foodbox\" name=\"foods\" type=\"select\" size=\"5\" >  \n                {this.renderOptions(this.props.menuItems)}\n            </Input>  \n        );\n    }\n\n\n}\nexport default FoodBox;","import '../../src/App.css';\nimport React from 'react';\nimport { Button } from 'reactstrap';\n\n\nclass AddButton extends React.Component {\n   \n    render() {\n        return (\n            \n            <Button block color=\"success\" onClick={this.props.onClick} id=\"updateButton\" type=\"button\" >{'add'}</Button>\n            \n        );\n    }\n\n}\nexport default AddButton;","import '../../src/App.css';\nimport React from 'react';\nimport FoodBoxSelect from './FoodBoxSelect'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Input} from 'reactstrap';\n\n\n\nclass SelectedBox extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n    renderOptions(selectedItems)\n    {\n        \n        const getCategoryContent = () => {\n            const content = [];\n            for(let i = 0; i < selectedItems.length; i++) \n            {\n                content.push(<FoodBoxSelect key={i} value={selectedItems[i]}/>);\n            }\n\n            return content;\n        }\n        return (\n            \n            <React.Fragment>\n                {getCategoryContent()}\n            </React.Fragment>\n        );\n    }\n\n    handleChange = (e) =>\n    {\n        var selectData = [];\n        this.setState({value: e.target.value});\n        selectData.push(e.target.value);\n        selectData.push(true);\n        this.props.handleMenuItemChange(selectData);\n\n    }\n\n    render() {\n        return (\n            \n            <Input type=\"select\" onChange={this.handleChange} className=\"selectBox h-100\" id=\"selectedBox\" name=\"selections\" size=\"5\" >\n                {this.renderOptions(this.props.selectedItems)}\n            </Input> \n\n        );\n    }\n\n}\nexport default SelectedBox;","import '../../src/App.css';\nimport React from 'react';\nimport { Button } from 'reactstrap';\n\n\nclass RemoveButton extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        return (\n            <Button block color=\"danger\" onClick={this.props.onClick} id=\"updateButton\" type=\"button\" >{\"remove\"}</Button>\n        );\n    }\n\n}\nexport default RemoveButton;","import '../../src/App.css';\nimport React from 'react';\nimport { Button } from 'reactstrap';\n\n\nclass EditButton extends React.Component {\n    \n    render() {\n        return (\n            <Button size=\"sm\" color=\"primary\" onClick={this.props.handleEditPress} id=\"editButton\" type=\"button\" >Edit</Button>\n        );\n    }\n\n}\nexport default EditButton;","import '../../src/App.css';\nimport React from 'react';\nimport { Button } from 'reactstrap';\n\n\nclass DeleteButton extends React.Component {\n    \n    render() {\n        return (\n            <Button onClick={this.props.handleDeletePress} size=\"sm\" color=\"danger\">Delete</Button>\n        );\n    }\n\n}\nexport default DeleteButton;","import '../../src/App.css';\nimport React from 'react';\nimport EditButton from './EditButton';\nimport DeleteButton from './DeleteButton';\nimport { CardBody, Card,  Row, Col, Container, CardFooter } from 'reactstrap';\n\n\nclass FoodNutritionFacts extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isEdit: false,\n            newCalories: this.props.calories,\n        };\n    }\n\n    getColor(value, nutrient){\n        switch (nutrient) {\n            case \"totalFat\":\n                if(value < 16)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n                \n            case \"protein\": \n                if(value > 2)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n            case \"carbohydrates\":\n                if(value <= 55)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n            case \"calories\":\n                if(value <= 400)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n            default:\n                break;\n        }\n    }\n\n    handleEditPress = () =>\n    {\n        this.props.toggleModal();\n    }\n\n    handleDeletePress = () =>\n    {\n        this.props.toggleDeleteMessage();\n    }\n    \n    capitalize = (str) => {\n        const lowercase = str.toLowerCase();\n        return str.charAt(0).toUpperCase() + lowercase.slice(1);\n    }\n\n    render() {\n        let currFood = this.capitalize(this.props.currSelectedFood);\n        return (     \n            <Card className=\"h-100\">\n                <CardBody>\n                    <Container fluid>\n                        <Row>\n                            {currFood}\n                        </Row>\n                        <Row className=\"text-nowrap\">\n                            Nutrition Facts\n                        </Row>\n                        <Row className={this.getColor(this.props.calories, \"calories\")}>\n                            Calories: {this.props.calories} \n                        </Row>\n                        <Row className={this.getColor(this.props.totalFat, \"totalFat\")}>\n                            Total Fat: {this.props.totalFat}\n                        </Row>\n                        <Row className={this.getColor(this.props.totalFat, \"totalFat\")} >\n                            Saturated Fat: {this.props.saturatedFat}\n                        </Row>\n                        <Row className={this.getColor(this.props.totalFat, \"totalFat\")} >\n                            Trans Fat: {this.props.transFat}\n                        </Row>\n                        <Row className={this.getColor(this.props.protein, \"protein\")}>\n\n                            Protein: {this.props.protein} \n                        </Row>\n                        <Row className={this.getColor(this.props.carbs, \"carbohydrates\")}>\n                            Carbs: {this.props.carbs} \n                        </Row>\n                    </Container>\n                </CardBody>\n                <CardFooter>\n                    <Container>\n                        <Row >\n                            <Col xs={6} className=\"no-padding\">\n                                <EditButton handleEditPress={this.handleEditPress}/>\n                            </Col>\n                            <Col xs={6} className=\"no-padding \">\n                                <DeleteButton handleDeletePress={this.handleDeletePress}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                </CardFooter>\n        </Card>\n        );\n    \n\n    }\n\n}\nexport default FoodNutritionFacts;","import '../../src/App.css';\nimport React from 'react';\nimport { Button } from 'reactstrap';\n\n\nclass AddFoodItemButton extends React.Component {\n    \n    render() {\n        return (\n            <Button onClick={this.props.hanldeAddFoodItemPress} size=\"sm\" color=\"primary\">Add Food Item</Button>\n        );\n    }\n\n}\nexport default AddFoodItemButton;","import '../../src/App.css';\nimport React from 'react';\n\nimport AddFoodItemButton from './AddFoodItemButton';\n\nimport { CardBody, Card, CardFooter, Row, Container } from 'reactstrap';\n\n\nclass TotalNutritionFacts extends React.Component {\n    getColor(value, nutrient){\n        switch (nutrient) {\n            case \"totalFat\":\n                if(value < 16)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n                \n            case \"protein\": \n                if(value > 2)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n            case \"carbohydrates\":\n                if(value <= 55)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n            case \"calories\":\n                if(value <= 400)\n                {\n                    return \"text-nowrap text-success\";\n                }\n                return \"text-nowrap text-danger\";\n            default:\n                break;\n        }\n    }\n\n    hanldeAddFoodItemPress = () => {\n        this.props.toggleAddFoodItemModal();\n    }\n\n    render() { \n        return (\n            <Card>\n                <CardBody>\n                    <Container fluid>\n                        <Row>\n                            Total\n                        </Row>\n                        <Row className=\"text-nowrap\">\n                            Nutrition Facts\n                        </Row>\n                        <Row className={this.getColor(this.props.totalCalories, \"calories\")}>\n                            Calories: {this.props.totalCalories} \n                        </Row>\n                        <Row className={this.getColor(this.props.totalFat, \"totalFat\")}>\n                            Total Fat: {this.props.totalFat}\n                        </Row>\n                        <Row className={this.getColor(this.props.totalFat, \"totalFat\")} >\n                            Saturated Fat: {this.props.totalSaturatedFat}\n                        </Row>\n                        <Row className={this.getColor(this.props.totalFat, \"totalFat\")} >\n                            Trans Fat: {this.props.totalTransFat}\n                        </Row>\n                        <Row className={this.getColor(this.props.totalProtein, \"protein\")}>\n                            Protein: {this.props.totalProtein} \n                        </Row>\n                        <Row className={this.getColor(this.props.totalCarbs, \"carbohydrates\")}>\n                            Carbs: {this.props.totalCarbs} \n                        </Row>\n                    </Container>\n                </CardBody>\n                <CardFooter>\n                    <AddFoodItemButton hanldeAddFoodItemPress={this.hanldeAddFoodItemPress}/>\n                </CardFooter>\n            </Card>\n        );\n    }\n\n}\nexport default TotalNutritionFacts;","import '../../src/App.css';\nimport React from 'react';\nimport { Input, ModalHeader, Modal, ModalBody, Form, FormGroup, Row, Container, Col, Button, ModalFooter } from 'reactstrap';\n\n\nclass ChangeGoalModal extends React.Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const formData = e.target;\n        console.log(\"formData.calorieGoal.value = \" + formData.calorieGoal.value);\n        console.log(\"formData.totalFatGoal.value = \" + formData.totalFatGoal.value);\n        console.log(\"formData.proteinGoal.value = \" + formData.proteinGoal.value);\n        console.log(\"formData.carbsGoal.value = \" + formData.carbsGoal.value);\n        this.updateGoals(\n            formData.calorieGoal.value,\n            formData.totalFatGoal.value,\n            formData.proteinGoal.value,\n            formData.carbsGoal.value);\n        this.props.toggle();\n    }\n\n    getResponse(response)\n    {\n        if (response.status === 200)\n        {\n        return response.json(); \n        }\n        else\n        {\n        console.log(\"HTTP error:\" + response.status + \":\" +  response.statusText);\n        return ([ [\"status \", response.status]]);\n        }\n    }\n\n    updateGoals = (calorieValue, totalFatValue, proteinValue, carbValue) => {\n        const requestOptions = {\n            method: \"PUT\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(\n                {\n                    \"calorieValue\": calorieValue,\n                    \"totalFatValue\" : totalFatValue,\n                    \"proteinValue\" : proteinValue,\n                    \"carbValue\": carbValue\n                })\n        };\n        fetch('/updateGoals', requestOptions)\n        .then(response => this.getResponse(response))\n        .then((jsonOutput) => {\n            console.log(jsonOutput);\n            this.props.updateGoalData();\n\n        })\n        .catch((error) => {console.log(error);})\n    }\n\n    render() {\n        return ( \n            <Modal isOpen={this.props.isModalOpen}>\n                <ModalHeader>\n                    Nutrition Goals\n                </ModalHeader>\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalBody>\n                        <FormGroup onSubmit={this.handleSubmit}>\n                            <Container fluid>\n                                <Row>\n                                    <Col xs={5}>\n                                        Calorie Goal: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.calorieGoal} className=\"mb-2\" bsSize=\"sm\" id=\"calorieGoal\" name=\"calorieGoal\"/>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Total Fat Goal: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.totalFatGoal} className=\"mb-2\" bsSize=\"sm\" id=\"totalFatGoal\" name=\"totalFatGoal\"/>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Protein Goal: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.proteinGoal} className=\"mb-2\" bsSize=\"sm\" id=\"proteinGoal\" name=\"proteinGoal\"/> \n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Carbs Goal: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.carbGoal} bsSize=\"sm\" id=\"carbsGoal\" name=\"carbsGoal\"/>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Container fluid>\n                            <Row>\n                                <Col>\n                                    <Button onClick={this.props.toggle} block >Back</Button>\n                                </Col>\n                                <Col>\n                                    <Button type=\"submit\" color=\"success\" block >Submit Change</Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </ModalFooter>\n                </Form>\n            </Modal>\n        );\n    }\n}\nexport default ChangeGoalModal;\n","import '../../src/App.css';\nimport React from 'react';\n\nimport {Modal, ModalBody, ModalHeader, Input, Form, FormGroup, ModalFooter, Container, Button, Row, Col} from 'reactstrap';\n\nclass EditModal extends React.Component {\n\n    capitalize = (str) => {\n        console.log(\"str: \" + str);\n        const lowercase = str.toLowerCase();\n        return str.charAt(0).toUpperCase() + lowercase.slice(1);\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const formData = e.target;\n        console.log(\"formData.calories.value = \" + formData.calories.value);\n        console.log(\"formData.totalFat.value = \" + formData.totalFat.value);\n        console.log(\"formData.saturatedFat.value = \" + formData.saturatedFat.value);\n        console.log(\"formData.transFat.value = \" + formData.transFat.value);\n        console.log(\"formData.protein.value = \" + formData.protein.value);\n        console.log(\"formData.carbohydrates.value = \" + formData.carbohydrates.value);\n        this.updateFood(\n            this.props.currSelectedFood, \n            formData.calories.value, \n            formData.totalFat.value, \n            formData.saturatedFat.value,\n            formData.transFat.value,\n            formData.protein.value,\n            formData.carbohydrates.value);\n        this.props.toggleModal();\n    }\n\n    getResponse(response)\n    {\n        if (response.status === 200)\n        {\n        return response.json(); \n        }\n        else\n        {\n        console.log(\"HTTP error:\" + response.status + \":\" +  response.statusText);\n        return ([ [\"status \", response.status]]);\n        }\n    }\n\n    updateFood = (menuItem, calories, totalFat, saturatedFat, transFat, protein, carbohydrates) => {\n        const requestOptions = {\n            method: \"PUT\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(\n                {\n                    \"menuItem\": menuItem,\n                    \"calories\" : calories,\n                    \"totalFat\" : totalFat,\n                    \"saturatedFat\": saturatedFat,\n                    \"transFat\": transFat,\n                    \"protein\" : protein,\n                    \"carbohydrates\" : carbohydrates\n                })\n        };\n        fetch('/updateFood', requestOptions)\n        .then(response => this.getResponse(response))\n        .then((jsonOutput) => {\n            console.log(jsonOutput);\n            this.props.refreshFoodData(menuItem);\n\n        })\n        .catch((error) => {console.log(error);})\n    }\n   \n    render() {\n        let currFood = this.capitalize(this.props.currSelectedFood);\n        \n        return (\n            <Modal isOpen={this.props.isModalOpen}>\n                <ModalHeader className=\"mx-auto\" isOpen={this.props.isModalOpen}>\n                    Edit {currFood} Nutrition Facts\n                </ModalHeader>\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalBody>\n                        <FormGroup onSubmit={this.handleSubmit}>\n                            <Container fluid>\n                                <Row>\n                                    <Col xs={5}>\n                                        Calories: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.calories} className=\"mb-2\" bsSize=\"sm\" id=\"caloriesInput\" name=\"calories\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Total Fat: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.totalFat} className=\"mb-2\" bsSize=\"sm\" id=\"totalFatInput\" name=\"totalFat\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Saturated Fat: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.saturatedFat} className=\"mb-2\" bsSize=\"sm\" id=\"saturatedFatInput\" name=\"saturatedFat\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Trans Fat: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.transFat} className=\"mb-2\" bsSize=\"sm\" id=\"transFatInput\" name=\"transFat\"  />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Protein: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.protein} className=\"mb-2\" bsSize=\"sm\" id=\"proteinInput\" name=\"protein\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Carbohydrates: \n                                    </Col>\n                                    <Col>\n                                        <Input defaultValue={this.props.carbs} className=\"mb-2\" bsSize=\"sm\" id=\"carbohydratessInput\" name=\"carbohydrates\" />\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Container fluid>\n                            <Row>\n                                <Col>\n                                    <Button onClick={this.props.toggleModal} block >Cancel</Button>\n                                </Col>\n                                <Col>\n                                    <Button type=\"submit\" color=\"success\" block >Submit</Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </ModalFooter>\n                </Form>\n        \n         \n            </Modal>\n        )\n    }\n}\n\nexport default EditModal;","import '../../src/App.css';\nimport React from 'react';\n\nimport { Modal, ModalBody, ModalHeader, ModalFooter, Container, Row, Col, Button } from 'reactstrap';\n\nclass DeleteMessageModal extends React.Component {\n    getResponse(response)\n    {\n        if (response.status === 200)\n        {\n        return response.json(); \n        }\n        else\n        {\n        console.log(\"HTTP error:\" + response.status + \":\" +  response.statusText);\n        return ([ [\"status \", response.status]]);\n        }\n    }\n\n    deleteFood = (menuItem) => {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(\n                {\n                    \"menuItem\": menuItem,\n                })\n        };\n        fetch('/deleteFood', requestOptions)\n        .then(response => this.getResponse(response))\n        .then((jsonOutput) => {\n            console.log(jsonOutput);\n            this.props.toggleDeleteMessage();\n            this.props.refreshMenuItems(this.props.category);\n\n        })\n        .catch((error) => {console.log(error);})\n        \n    }\n\n    render() {\n       \n\n        return(\n            <Modal isOpen={this.props.isModalOpen} >\n                <ModalHeader>\n                    Are you sure want to remove {this.props.currSelectedFood} from your recorded food items?\n                </ModalHeader>\n                <ModalBody>\n                    This can not be reversed\n                </ModalBody>\n                <ModalFooter>\n                    <Container fluid>\n                        <Row>\n                            <Col>\n                                <Button onClick={this.props.toggleDeleteMessage} block >Cancel</Button>\n                            </Col>\n                            <Col>\n                                <Button onClick={() => this.deleteFood(this.props.currSelectedFood)} color=\"danger\" block >Delete</Button>\n                            </Col>\n                        </Row>\n                    </Container>\n                </ModalFooter>\n            </Modal>\n        )\n    }\n}\n\nexport default DeleteMessageModal","import React from 'react';\n\nimport {Modal, ModalBody, ModalHeader, Input, Form, FormGroup, ModalFooter, Container, Button, Row, Col, DropdownMenu, DropdownToggle, Dropdown, DropdownItem} from 'reactstrap';\n\nclass AddFoodItemModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDropDownOpen: false,\n            dropDownValue: \"Proteins\"\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const formData = e.target;\n        console.log(\"formData.FoodItemName.value \" + formData.foodItemName.value);\n        console.log(\"formData.category.value \" + this.state.dropDownValue);\n        console.log(\"formData.calories.value \" + formData.calories.value);\n        console.log(\"formData.totalFat.value = \" + formData.totalFat.value);\n        console.log(\"formData.saturatedFat.value = \" + formData.saturatedFat.value);\n        console.log(\"formData.transFat.value = \" + formData.transFat.value);\n        console.log(\"formData.protein.value = \" + formData.protein.value);\n        console.log(\"formData.carbohydrates.value = \" + formData.carbohydrates.value);\n        this.addFood(\n            formData.foodItemName.value, \n            this.state.dropDownValue,\n            formData.calories.value,\n            formData.totalFat.value,\n            formData.saturatedFat.value,\n            formData.transFat.value,\n            formData.protein.value,\n            formData.carbohydrates.value);\n        this.props.toggleAddFoodItemModal();\n            \n    }\n\n    getResponse(response)\n    {\n        if (response.status === 200)\n        {\n        return response.json(); \n        }\n        else\n        {\n        console.log(\"HTTP error:\" + response.status + \":\" +  response.statusText);\n        return ([ [\"status \", response.status]]);\n        }\n    }\n\n    dropDownToggle = () => {\n        this.setState({\n            isDropDownOpen: !this.state.isDropDownOpen\n        });\n    }\n    \n    handleDropDownChange = (item) =>\n    {\n        this.setState({\n            dropDownValue: item\n        });\n\n    }\n\n    addFood = (menuItem, category, calories, totalFat, saturatedFat, transFat, protein, carbohydrates) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(\n                {\n                    \"menuItem\": menuItem,\n                    \"category\": category,\n                    \"calories\" : calories,\n                    \"totalFat\" : totalFat,\n                    \"saturatedFat\": saturatedFat,\n                    \"transFat\": transFat,\n                    \"protein\" : protein,\n                    \"carbohydrates\" : carbohydrates\n                })\n        };\n        fetch('/addFood', requestOptions)\n        .then(response => this.getResponse(response))\n        .then((jsonOutput) => {\n            console.log(jsonOutput);\n            this.props.refreshMenuItems();\n\n        })\n        .catch((error) => {console.log(error);})\n    }\n      \n    \n    render() {\n        return (\n            <Modal isOpen={this.props.isAddFoodItemModalOpen}>\n                    <ModalHeader className=\"mx-auto\">\n                        Add New Food\n                    </ModalHeader>\n                    <Form onSubmit={this.handleSubmit}>\n                    <ModalBody>\n                        <FormGroup onSubmit={this.handleSubmit}>\n                            <Container fluid>\n                                <Row>\n                                    <Col xs={5}>\n                                        Food Name: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder=\"Pineapples\" defaultValue={\"\"} className=\"mb-2\" bsSize=\"sm\" id=\"foodItemName\" name=\"foodItemName\" />\n                                    </Col>\n                                </Row>\n                                <Row className=\"mb-2\">\n                                    <Col xs={5}>\n                                        Category: \n                                    </Col>\n                                    <Col>\n                                        <Dropdown name=\"category\" toggle={this.dropDownToggle} isOpen={this.state.isDropDownOpen} >\n                                            <DropdownToggle caret \n                                                block\n                                                size=\"sm\"\n                                                color=\"primary\"\n                                                onClick={this.dropDownToggle}\n                                                aria-expanded={this.state.isDropDownOpen}\n                                                data-toggle=\"dropdown\">\n                                                {this.state.dropDownValue}\n                                            </DropdownToggle>\n                                            <DropdownMenu id=\"category\" name=\"category\">\n                                                <DropdownItem onClick={() => this.handleDropDownChange(this.props.foodGroups[0])} id=\"category\" value={this.props.foodGroups[0]}>\n                                                    {this.props.foodGroups[0]}\n                                                </DropdownItem>\n                                                <DropdownItem onClick={() => this.handleDropDownChange(this.props.foodGroups[1])} id=\"category\" value={this.props.foodGroups[1]}>\n                                                    {this.props.foodGroups[1]}\n                                                </DropdownItem>\n                                                <DropdownItem onClick={() => this.handleDropDownChange(this.props.foodGroups[2])} id=\"category\" value={this.props.foodGroups[2]}>\n                                                    {this.props.foodGroups[2]}\n                                                </DropdownItem>\n                                                <DropdownItem onClick={() => this.handleDropDownChange(this.props.foodGroups[3])} id=\"category\" value={this.props.foodGroups[3]}>\n                                                    {this.props.foodGroups[3]}\n                                                </DropdownItem>\n                                                <DropdownItem onClick={() => this.handleDropDownChange(this.props.foodGroups[4])} id=\"category\" value={this.props.foodGroups[4]}>\n                                                    {this.props.foodGroups[4]}\n                                                </DropdownItem>\n                                            </DropdownMenu>\n                                        </Dropdown>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Calories: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder={\"0\"} defaultValue={0} className=\"mb-2\" bsSize=\"sm\" id=\"caloriesInput\" name=\"calories\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Total Fat: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder={\"0\"} defaultValue={0} className=\"mb-2\" bsSize=\"sm\" id=\"totalFatInput\" name=\"totalFat\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Saturated Fat: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder={\"0\"} defaultValue={0} className=\"mb-2\" bsSize=\"sm\" id=\"saturatedFatInput\" name=\"saturatedFat\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Trans Fat: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder={\"0\"} defaultValue={0} className=\"mb-2\" bsSize=\"sm\" id=\"transFatInput\" name=\"transFat\"  />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Protein: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder={\"0\"} defaultValue={0} className=\"mb-2\" bsSize=\"sm\" id=\"proteinInput\" name=\"protein\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={5}>\n                                        Carbohydrates: \n                                    </Col>\n                                    <Col>\n                                        <Input placeholder={\"0\"} defaultValue={0} className=\"mb-2\" bsSize=\"sm\" id=\"carbohydratessInput\" name=\"carbohydrates\" />\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Container fluid>\n                            <Row>\n                                <Col>\n                                    <Button onClick={this.props.toggleAddFoodItemModal} block >Cancel</Button>\n                                </Col>\n                                <Col>\n                                    <Button type=\"submit\" color=\"success\" block >Submit</Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </ModalFooter>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default AddFoodItemModal;","import '../../src/App.css';\n\nimport React from 'react';\n\n\nimport { CardBody, Card, Container, CardFooter, Progress, Button } from 'reactstrap';\n\n\nclass ProgressBars extends React.Component {\n\n\n\n  render() {\n\n    return (     \n        <Card className=\"h-100\" >\n            <CardBody>\n                <Container fluid className=\"no-padding\">\n                  <Progress className=\"mb-2\" value={this.props.calorieProgress} >{\"Calories\"}</Progress>\n                  <Progress className=\"mb-2\" value={this.props.totalFatProgress}>{\"Total Fat\"}</Progress>   \n                  <Progress className=\"mb-2\" value={this.props.proteinProgress}>{\"Protein\"}</Progress>\n                  <Progress  value={this.props.carbProgress}>{\"Carbs\"}</Progress>\n                </Container>\n            </CardBody>\n            <CardFooter className=\"d-flex justify-content-center\">\n              <Button onClick={this.props.toggle} size=\"sm\" color=\"success\">Change Goals</Button>\n            </CardFooter>\n    </Card>\n    );\n\n\n  }\n\n}\nexport default ProgressBars;","import '../../src/App.css';\nimport React from 'react';\nimport '../../src/foodData.json'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Container, Row, Col, DropdownToggle, ButtonDropdown } from 'reactstrap';\n\nimport MyHeader from './MyHeader';\nimport FoodGroupList from './FoodGroupList';\nimport FoodBox from './FoodBox';\nimport AddButton from './AddButton';\nimport SelectedBox from './SelectedBox';\nimport RemoveButton from './RemoveButton';\n\nimport FoodNutritionFacts from './FoodNutritionFacts';\nimport TotalNutritionFacts from './TotalNutritionFacts';\nimport ChangeGoalModal from './ChangeGoalModal';\nimport EditModal from './EditModal.js';\nimport DeleteMessageModal from './DeleteMessageModal.js';\nimport AddFoodItemModal from './AddFoodItemModal';\nimport ProgressBars from './ProgressBars';\n\n\nvar foodGroups = [\"proteins\", \"fruits\", \"vegetables\", \"dairy\", \"grains\"];\nclass App extends React.Component {\n  constructor(props) \n  {\n    super(props);\n    this.state = {\n      category: '',\n      menuItems: '',\n      foodGroups: foodGroups,\n      currMenuSelection: '',\n      currCalories: 0,\n      currTotalFat: 0,\n      currSaturatedFat: 0,\n      currTransFat: 0,\n      currProtein: 0,\n      currCarbs: 0,\n      selectedItems: [],\n      deselect: false,\n      dropdownOpen: false,\n      calorieGoal: 0,\n      totalFatGoal: 0,\n      proteinGoal: 0,\n      carbGoal: 0,\n      totalCalories: 0,\n      totalFat: 0,\n      totalSaturatedFat: 0,\n      totalTransFat: 0,\n      totalProtein: 0,\n      totalCarbs: 0,\n      data: \"\",\n      isModalOpen: false,\n      isDeleteModalOpen: false,\n      isAddFoodItemModalOpen: false,\n      isChangeGoalModalOpen: false,\n    };\n  }\n\n  getResponse(response)\n  {\n    if (response.status === 200)\n    {\n      return response.json(); \n    }\n    else\n    {\n      console.log(\"HTTP error:\" + response.status + \":\" +  response.statusText);\n      return ([ [\"status \", response.status]]);\n    }\n  }\n\n  updateData = (apiResponse) => {\n    this.setState({data: apiResponse})\n    console.log(\"data: \" + this.state.data);\n  }\n\n  updateGoalData = (apiResponse) => {\n    this.setState({\n        calorieGoal: apiResponse[0],\n        totalFatGoal: apiResponse[1],\n        proteinGoal: apiResponse[2],\n        carbGoal: apiResponse[3],\n      })\n   \n  }\n\n  fetchData = () => {\n    //In package.json add \"proxy\": \"http://localhost:5000\" \n    //This will allow redirect to REST api in Flask w/o CORS errors\n    fetch('/fetchData')\n    .then(response => this.getResponse(response))//The promise response is returned, then we extract the json data\n    .then ((jsonOutput) => //jsonOutput now has result of the data extraction\n              {\n                this.updateData(jsonOutput);\n              }\n          )\n    .catch((error) => \n            {console.log(error);\n                this.updateData(\"\");\n             } )\n  }\n\n\n\n  fetchGoalData = () => \n  {\n    fetch('/fetchGoalData')\n    .then(response => this.getResponse(response))//The promise response is returned, then we extract the json data\n    .then ((jsonOutput) => //jsonOutput now has result of the data extraction\n              {\n                this.updateGoalData(jsonOutput);\n              }\n          )\n    .catch((error) => {console.log(error);})\n  }\n\n  fetchFoodData = (food) => {\n    fetch('/getFood/' + food)\n    .then(response => this.getResponse(response))\n    .then ((jsonOutput) => //jsonOutput now has result of the data extraction\n              {\n                \n                this.setState({\n                  currMenuSelection: jsonOutput[1],\n                  currCalories: jsonOutput[3],\n                  currTotalFat: jsonOutput[4],\n                  currSaturatedFat: jsonOutput[5],\n                  currTransFat: jsonOutput[6],\n                  currProtein: jsonOutput[7],\n                  currCarbs: jsonOutput[8]\n                })\n              }\n          )\n    .catch((error) => \n            {console.log(error);\n                \n             })\n  }\n\n  fetchFoodsByCategory = (category) => {\n    console.log(\"category: \" + category);\n    fetch('/getFoodsByCategory/' + category)\n    .then(response => this.getResponse(response))\n    .then((jsonOutput => {\n      this.setState({menuItems: jsonOutput})\n    }))\n    .catch((error) => {console.log(error);})\n    \n    \n  }\n\n  componentDidMount() {\n    this.fetchData();\n    this.fetchGoalData();\n  }\n\n  newCategory = (childData) =>{\n    this.fetchFoodsByCategory(childData);\n    this.setState({category: childData});\n    console.log(\"category: \" + this.state.category + \"| menuItems: \" + this.state.menuItems);\n  }\n\n  handleMenuItemChange = (childData) => {\n    this.fetchFoodData(childData[0]);\n    this.setState({currMenuSelection: childData[0], deselect: childData[1]})\n  }\n\n  toggle = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  addItemButtonClick = () => {\n    let currSelectedItems = this.state.selectedItems;\n    let totalCalories = this.state.totalCalories;\n    let totalFat = this.state.totalFat;\n    let totalSaturatedFat = this.state.totalSaturatedFat;\n    let totalTransFat = this.state.totalTransFat;\n    let totalProtein = this.state.totalProtein;\n    let totalCarbs = this.state.totalCarbs;\n    \n    currSelectedItems.push(this.state.currMenuSelection);\n    totalCalories = totalCalories + Math.round(this.state.currCalories);\n    totalFat = totalFat + Math.round(this.state.currTotalFat);\n    totalSaturatedFat = totalSaturatedFat + Math.round(this.state.currSaturatedFat);\n    totalTransFat = totalTransFat + Math.round(this.state.currTransFat);\n    totalProtein = totalProtein + Math.round(this.state.currProtein);\n    totalCarbs = totalCarbs + Math.round(this.state.currCarbs);\n    \n    this.setState({selectedItems: currSelectedItems, \n                  totalCalories: totalCalories,\n                  totalFat: totalFat,\n                  totalSaturatedFat: totalSaturatedFat,\n                  totalTransFat: totalTransFat,\n                  totalProtein: totalProtein,\n                  totalCarbs: totalCarbs,\n                });\n  }\n\n  removeItemClick = () => {\n    let currSelectedItems = this.state.selectedItems;\n    let currMenuSelection = this.state.currMenuSelection;\n    let totalCalories = this.state.totalCalories;\n    let totalFat = this.state.totalFat;\n    let totalSaturatedFat = this.state.totalSaturatedFat;\n    let totalTransFat = this.state.totalTransFat;\n    let totalProtein = this.state.totalProtein;\n    let totalCarbs = this.state.totalCarbs;\n\n    for(var i = 0; i < currSelectedItems.length; i++)\n    {\n      if(currSelectedItems[i] === currMenuSelection)\n      {\n        currSelectedItems.splice(i, 1); \n        totalCalories = totalCalories - Math.round(this.state.currCalories);\n        totalFat = totalFat - Math.round(this.state.currTotalFat);\n        totalSaturatedFat = totalSaturatedFat - Math.round(this.state.currSaturatedFat);\n        totalTransFat = totalTransFat - Math.round(this.state.currTransFat);\n        totalProtein = totalProtein - Math.round(this.state.currProtein);\n        totalCarbs = totalCarbs - Math.round(this.state.currCarbs);\n        break;\n      }\n    }\n\n    this.setState({selectedItems: currSelectedItems, \n                    totalCalories: totalCalories,\n                    totalFat: totalFat,\n                    totalSaturatedFat: totalSaturatedFat,\n                    totalTransFat: totalTransFat,\n                    totalProtein: totalProtein,\n                    totalCarbs: totalCarbs,\n                  });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({calorieGoal: e.target.caloriesInput.value});\n  }\n\n  toggleModal = () => {\n    this.setState({isModalOpen: !this.state.isModalOpen});\n  }\n\n  toggleDeleteMessage = () => {\n    this.setState({isDeleteModalOpen: !this.state.isDeleteModalOpen});\n    console.log('toggleDeleteMessage: ' + this.state.isDeleteModalOpen);\n  }\n\n  toggleAddFoodItemModal = () => {\n    this.setState({isAddFoodItemModalOpen: !this.state.isAddFoodItemModalOpen});\n    console.log('toggleAddFoodItemModal: ' + this.state.isAddFoodItemModalOpen);\n  }\n\n  toggleChangeGoalModal = () => {\n    this.setState({isChangeGoalModalOpen: !this.state.isChangeGoalModalOpen});\n    console.log('toggleChangeGoalModal: ' + this.state.isChangeGoalModalOpen);\n  }\n\n\n\n\n  \n  render() {\n    return (\n      \n      <Container fluid>\n        <EditModal \n          isModalOpen={this.state.isModalOpen} \n          currSelectedFood={this.state.currMenuSelection}\n          calories={this.state.currCalories}\n          totalFat={this.state.currTotalFat}\n          saturatedFat={this.state.currSaturatedFat}\n          transFat={this.state.currTransFat}\n          protein={this.state.currProtein}\n          carbs={this.state.currCarbs}\n          toggleModal={this.toggleModal}\n          refreshFoodData={this.fetchFoodData}>\n        </EditModal>\n        <DeleteMessageModal \n          isModalOpen={this.state.isDeleteModalOpen}\n          currSelectedFood={this.state.currMenuSelection}\n          toggleDeleteMessage={this.toggleDeleteMessage}\n          refreshMenuItems={this.fetchFoodsByCategory}\n          category={this.state.category}\n        />\n        <AddFoodItemModal\n          isAddFoodItemModalOpen={this.state.isAddFoodItemModalOpen}\n          toggleAddFoodItemModal={this.toggleAddFoodItemModal}\n          foodGroups={this.state.foodGroups}\n          refreshMenuItems={this.fetchFoodsByCategory}\n        />\n        <ChangeGoalModal\n          isModalOpen={this.state.isChangeGoalModalOpen}\n          toggle={this.toggleChangeGoalModal}\n          calorieGoal={this.state.calorieGoal}\n          totalFatGoal={this.state.totalFatGoal}\n          proteinGoal={this.state.proteinGoal}\n          carbGoal={this.state.carbGoal}\n          updateGoalData={this.fetchGoalData}\n        />\n        <Row >\n          <MyHeader ></MyHeader>\n        </Row>\n        <Row>\n          <Col className=\"class-col\" xs={6}>\n            <h6>Categories</h6>\n          </Col>\n          <Col className=\"class-col\" xs={6}>\n            <h6>MenuItems</h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"class-col\" xs={6}>\n            <ButtonDropdown className=\"button\" toggle={this.toggle} isOpen={this.state.dropdownOpen}>\n              <DropdownToggle caret \n              className=\"button\"\n              onClick={this.toggle}\n              aria-expanded={this.state.dropdownOpen}\n              data-toggle=\"dropdown\"\n              >\n              Food Categories\n              </DropdownToggle>\n              <FoodGroupList  className=\"button\" newCategory={this.newCategory} foodGroups={this.state.foodGroups} />  \n            </ButtonDropdown>\n          </Col>\n          <Col className=\"class-col\" xs={6}>\n            <FoodBox handleMenuItemChange={this.handleMenuItemChange} category={this.state.category} menuItems={this.state.menuItems}/>\n          </Col>\n          <Col className=\"row-padding\" xs={6}>\n              <p><AddButton onClick={this.addItemButtonClick}/></p>\n          </Col>\n          <Col className=\"row-padding\" xs={6}>\n              <RemoveButton onClick={this.removeItemClick}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={6}>\n            <SelectedBox handleMenuItemChange={this.handleMenuItemChange} selectedItems={this.state.selectedItems}/>\n          </Col>\n          <Col>\n            <ProgressBars \n              calorieProgress={(this.state.totalCalories/this.state.calorieGoal) * 100}\n              totalFatProgress={(this.state.totalFat/this.state.totalFatGoal) * 100}\n              proteinProgress={(this.state.totalProtein/this.state.proteinGoal) * 100}\n              carbProgress={(this.state.totalCarbs/this.state.carbGoal) * 100}\n              toggle={this.toggleChangeGoalModal}\n            />\n          </Col>\n        </Row>\n        <Row className=\"row-padding\">\n          <Col xs={6}>\n            <TotalNutritionFacts \n              totalCalories={this.state.totalCalories}\n              totalFat={this.state.totalFat}\n              totalSaturatedFat={this.state.totalSaturatedFat}\n              totalTransFat={this.state.totalTransFat}\n              totalProtein={this.state.totalProtein}\n              totalCarbs={this.state.totalCarbs}\n              toggleAddFoodItemModal={this.toggleAddFoodItemModal}\n            >\n\n            </TotalNutritionFacts>\n          </Col>\n          <Col xs={6}>\n            <FoodNutritionFacts \n              toggleModal={this.toggleModal} \n              toggleDeleteMessage={this.toggleDeleteMessage}\n              currSelectedFood={this.state.currMenuSelection}\n              calories={Math.round(this.state.currCalories)}\n              totalFat={Math.round(this.state.currTotalFat)}\n              saturatedFat={Math.round(this.state.currSaturatedFat)}\n              transFat={Math.round(this.state.currTransFat)}\n              protein={Math.round(this.state.currProtein)}\n              carbs={Math.round(this.state.currCarbs)}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}